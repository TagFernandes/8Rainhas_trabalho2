        -:    0:Source:rainhas.cpp
        -:    1:/**
        -:    2:*@file rainhas.cpp
        -:    3:*/
        -:    4:
        -:    5:// Copyright (c) 2023, Thiago Fernandes
        -:    6:
        -:    7:
        -:    8:#include <iostream>
        -:    9:#include <fstream>
        -:   10:#include <string>
        -:   11:#include <vector>
        -:   12:#include <cctype>
        -:   13:#include "rainhas.hpp"
        -:   14:
        -:   15:using std::cout; using std::cin;
        -:   16:using std::endl; using std::string;
        -:   17:using std::vector;
        -:   18:
        -:   19:/**
        -:   20:* @brief Verifica tamanho da matriz inserida.
        -:   21:*
        -:   22:* Função verificaTamanho ira contar o numero de 0s e 1s no tabuleiro,
        -:   23:* caso haja mais ou menos de 64 pecas no tabuleiros, ela ira retornarm erro,
        -:   24:* bem como caso seja inserido um caractere diferente de "0" ou "1".
        -:   25:*
        -:   26:* @param filename nome do arquivo .txt que contem a matriz. 
        -:   27:* @return retorna 1 caso esteja tudo certo com a matiz,
        -:   28:*                 -1 caso seja um formato inválido
        -:   29:*                 -2 caso não seja possível abrir o arquivo.
        -:   30:*/
       52:   31:int verificaTamanho(const std::string& filename) {
       52:   32:    std::ifstream arquivo(filename);
        -:   33:
       52:   34:    if (!arquivo) {
    #####:   35:        std::cout << "Erro ao abrir o arquivo." << std::endl;
    #####:   36:        return -2;
        -:   37:    }
        -:   38:
       52:   39:    int contLetras = 0;
       52:   40:    int contNumeros = 0;
        -:   41:    char caractere;
        -:   42:
     3830:   43:    while (arquivo.get(caractere)) {
     3778:   44:        if (isalpha(caractere)) {
       48:   45:            contLetras++;
     3730:   46:        } else if (isdigit(caractere)) {
     3278:   47:            contNumeros++;
        -:   48:        }
        -:   49:    }
        -:   50:
       52:   51:    if (contNumeros != 64 && contLetras != 0) {
        4:   52:        cout << "numeros de caracteres: " << contNumeros << endl;
        4:   53:        return -1;
        -:   54:    }
        -:   55:
       48:   56:    arquivo.close();
        -:   57:
       48:   58:    return 1;
       52:   59:}
        -:   60:
        -:   61:/**
        -:   62:* Checagem de possíveis ataques.
        -:   63:*
        -:   64:* Função check irá realizar a checagem de todos os possíveis ataques de uma
        -:   65:* rainha. percorrendo a matriz a procura de rainhas na mesma linha, coluna ou
        -:   66:* diagonais. 
        -:   67:*
        -:   68:* @param filename nome do arquivo .txt que contem o tabuleiro de xadrez. 
        -:   69:* @return retorna 1 caso a disposição das rainhas no tabuleiro satisfaça
        -:   70:*                  o problema;
        -:   71:*                 0 caso alguma rainha esteja em posição em que possa atacar
        -:   72:*                  outra. Neste caso, o programa irá criar um arquivo txt com o
        -:   73:*                  nome "ataque - 'nome do arquivo correspondente'", mostrando
        -:   74:*                  as posições em que ocorrem ataques de rainhas;
        -:   75:*                 -1 caso o tabuleiro do arquivo não seja uma matriz 8x8;
        -:   76:*                 -2 caso não seja possível abrir o arquivo.
        -:   77:*/
       28:   78:int check(const std::string& filename) {
       28:   79:    if (verificaTamanho(filename) == -1) { return -1;}
      24*:   80:    if (verificaTamanho(filename) == -2) { return -2;}
        -:   81:
       24:   82:    std::ifstream arquivo(filename);
        -:   83:
       24:   84:    std::string linha1, linha2, linha3, linha4, linha5, linha6, linha7, linha8;
       24:   85:    std::string linhaExtra;
        -:   86:
       24:   87:    if (std::getline(arquivo, linha1) &&
       48:   88:        std::getline(arquivo, linha2) &&
       24:   89:        std::getline(arquivo, linha3) &&
       24:   90:        std::getline(arquivo, linha4) &&
       24:   91:        std::getline(arquivo, linha5) &&
       24:   92:        std::getline(arquivo, linha6) &&
       24:   93:        std::getline(arquivo, linha7) &&
       71:   94:        std::getline(arquivo, linha8) &&
       23:   95:        !std::getline(arquivo, linhaExtra)) {
        -:   96:    } else {
        -:   97:        std::cout <<
        2:   98:        "O arquivo contém menos de 8 linhas ou possui mais do que 8 linhas." <<
        2:   99:        std::endl;
        2:  100:        return -1;
        -:  101:    }
        -:  102:
       22:  103:    arquivo.close();
        -:  104:
       22:  105:    int valueReturn = 1;
        -:  106:    int arrayLine1[8];  //  Array para armazenar os 8 primeiros números
        -:  107:    int arrayLine2[8];
        -:  108:    int arrayLine3[8];
        -:  109:    int arrayLine4[8];
        -:  110:    int arrayLine5[8];
        -:  111:    int arrayLine6[8];
        -:  112:    int arrayLine7[8];
        -:  113:    int arrayLine8[8];
        -:  114:
        -:  115:    // Extrai os 8 primeiros caracteres da string e os converte para inteiros
       22:  116:    int countLine = 0;
       22:  117:    int countTotal = 0;
        -:  118:    int* arrays[] = {
        -:  119:       arrayLine1, arrayLine2, arrayLine3, arrayLine4,
       22:  120:       arrayLine5, arrayLine6, arrayLine7, arrayLine8};
        -:  121:
        -:  122:    vector<string> linhas =
      220:  123:      { linha1, linha2, linha3, linha4, linha5, linha6, linha7, linha8};
        -:  124:
       22:  125:    int attackSameLine[8] = {10, 10, 10, 10, 10, 10, 10, 10};
        -:  126:
       22:  127:    std::string ataques = "";  //  Armazena ataques
        -:  128:
      193:  129:    for (int i = 0; i < 8; i++) {
        -:  130:        //  colocando lista em array de inteiros
      173:  131:        countLine = 0;
     1557:  132:        for (int y = 0; y < 8; y++) {attackSameLine[y] = 10;}
        -:  133:
     1553:  134:        for (int j = 0; j < 8; j++) {
     1382:  135:            if (linhas[i][j] - '0' == 1 || linhas[i][j] - '0' == 0) {
     1380:  136:                arrays[i][j] = linhas[i][j] - '0';
     1380:  137:                if (arrays[i][j] == 1) {
      156:  138:                    countLine += 1;
      156:  139:                    countTotal += 1;
        -:  140:                }
        2:  141:            } else { return -1;}  //  caracter diferente de 1 e 0
        -:  142:        }
        -:  143:
        -:  144:        //  verificação ataque mesma linha
      171:  145:        if (countLine >=  2) {
        9:  146:            for (int x = 0; x < 8; x++) {
        8:  147:                if (arrays[i][x] == 1) {
       36:  148:                    for (int a = 0; a < 8; a++) {
       36:  149:                        if (attackSameLine[a] == 10) {
        8:  150:                            attackSameLine[a] = x;
        8:  151:                            break;
        -:  152:                        }
        -:  153:                    }
        -:  154:                }
        -:  155:            }
        8:  156:            for (int b = 0; b < 7; b++) {
        7:  157:                if (attackSameLine[b] != 10 && attackSameLine[b+1] != 10) {
        7:  158:                    ataques += std::to_string(i + 1); ataques += ",";
        7:  159:                    ataques += std::to_string(attackSameLine[b] + 1);
        7:  160:                    ataques += "            ";
        7:  161:                    ataques += std::to_string(i + 1); ataques += ",";
        7:  162:                    ataques += std::to_string(attackSameLine[b+1] + 1);
        7:  163:                    ataques += "\n";
        7:  164:                    valueReturn = 0;
        -:  165:                }
        -:  166:            }
        -:  167:        }
        -:  168:    }
        -:  169:
       20:  170:    if (countTotal > 8 || countTotal < 8) {  //  mais ou menos de 8 rainhas
        2:  171:        std::cout << "matriz invalida" << std::endl;
        2:  172:        return -1;
        -:  173:    }
        -:  174:
        -:  175:
        -:  176:    //  verificacao colunas
       18:  177:    bool shouldBreak = false;
      162:  178:    for (int i = 0; i < 8; i++) {
     1296:  179:        for (int j = 0; j < 8; j++) {
     1152:  180:            if (arrays[i][j] == 1) {
      144:  181:                shouldBreak =  false;
      785:  182:                for (int y = i; y < 8; y++) {
     3584:  183:                    for (int x = j; x < 8; x++) {
     2943:  184:                        if (arrays[y][x] == 1 && i != y && x == j) {
       12:  185:                            ataques += std::to_string(i + 1); ataques += ",";
       12:  186:                            ataques += std::to_string(j + 1);
       12:  187:                            ataques += "            ";
       12:  188:                            ataques += std::to_string(y + 1); ataques += ",";
       12:  189:                            ataques += std::to_string(x + 1); ataques += "\n";
        -:  190:
       12:  191:                            valueReturn = 0;
       12:  192:                            shouldBreak = true;
       12:  193:                            break;
        -:  194:                        }
        -:  195:                    }
      653:  196:                    if (shouldBreak) {break;}
        -:  197:                }
        -:  198:            }
        -:  199:        }
        -:  200:    }
        -:  201:
        -:  202:    //  verificacao diagonais direita
       18:  203:    int cont = 0;
      162:  204:    for (int i = 0; i < 8; i++) {
     1296:  205:        for (int j = 0; j < 8; j++) {
     1152:  206:            if (arrays[i][j] == 1) {
      144:  207:                cont = 1;
      385:  208:                for (int y = i + 1; y < 8; y++) {
      326:  209:                    if (j+cont >= 8) {
       53:  210:                        break;
        -:  211:                    }
      273:  212:                    if (arrays[y][j+cont] == 1) {
       32:  213:                        ataques += std::to_string(i + 1); ataques += ",";
       32:  214:                        ataques += std::to_string(j + 1);
       32:  215:                        ataques += "            ";
       32:  216:                        ataques += std::to_string(y + 1); ataques += ",";
       32:  217:                        ataques += std::to_string(j+cont + 1); ataques += "\n";
       32:  218:                        valueReturn = 0;
       32:  219:                        break;
        -:  220:                    }
      241:  221:                    cont += 1;
        -:  222:                }
        -:  223:            }
        -:  224:        }
        -:  225:    }
        -:  226:
        -:  227:    //  verificacao diagonais esquerda
       18:  228:    cont = 0;
      162:  229:    for (int i = 0; i < 8; i++) {
     1296:  230:        for (int j = 0; j < 8; j++) {
     1152:  231:            if (arrays[i][j] == 1) {
      144:  232:                cont = 1;
      415:  233:                for (int y = i + 1; y < 8; y++) {
      349:  234:                    if (j-cont < 0) {
       58:  235:                        break;
        -:  236:                    }
      291:  237:                    if (arrays[y][j-cont] == 1) {
       20:  238:                        ataques += std::to_string(i + 1); ataques += ",";
       20:  239:                        ataques += std::to_string(j + 1);
       20:  240:                        ataques += "            ";
       20:  241:                        ataques += std::to_string(y + 1); ataques += ",";
       20:  242:                        ataques += std::to_string(j-cont + 1); ataques += "\n";
       20:  243:                        valueReturn = 0;
       20:  244:                        break;
        -:  245:                    }
      271:  246:                    cont += 1;
        -:  247:                }
        -:  248:            }
        -:  249:        }
        -:  250:    }
       18:  251:    if (valueReturn == 0) {
       14:  252:        std::string nome = "ataques - ";
       14:  253:        nome += filename;
       14:  254:        std::ofstream arquivo(nome);
        -:  255:
       14:  256:        if (arquivo.is_open()) {  // Verifica se o arquivo foi aberto
       14:  257:            arquivo << ataques;  // Escreve a mensagem no arquivo
       14:  258:            arquivo.close();  // Fecha o arquivo
        -:  259:        } else {
    #####:  260:            std::cout << "Erro ao abrir o arquivo." << std::endl;
        -:  261:        }
       14:  262:    }
       18:  263:    return valueReturn;
       24:  264:}
        -:  265:/**
        -:  266:* Verifica o arquivo.
        -:  267:*
        -:  268:* Função verifica_solucao_8_rainhas é a função chamada pelo testa_rainhas.cpp
        -:  269:* que por sua vez chama as função de checagem na ordem certa para retornar a
        -:  270:* solução para o problema das 8 rainhas.
        -:  271:* @param filename nome do arquivo .txt que contem o tabuleiro de xadrez. 
        -:  272:* @return retorna 1 caso a disposição das rainhas no tabuleiro satisfaça
        -:  273:*                  o problema;
        -:  274:*                 0 caso alguma rainha esteja em posição em que possa atacar
        -:  275:*                  outra. Neste caso, o programa irá criar um arquivo txt com o
        -:  276:*                  nome "ataque - 'nome do arquivo correspondente'", mostrando
        -:  277:*                  as posições em que ocorrem ataques de rainhas;
        -:  278:*                 -1 caso o tabuleiro do arquivo não seja uma matriz 8x8;
        -:  279:*                 -2 caso não seja possível abrir o arquivo.
        -:  280:*/
       28:  281:int verifica_solucao_8_rainhas(const std::string& filename) {
       28:  282:    int valor = check(filename);
        -:  283:
       28:  284:    if (valor == -1) {
       10:  285:        return -1;  //  matriz Inválida
        -:  286:    }
       18:  287:    if (valor == -2) {
    #####:  288:        cout << "Erro ao abrir arquivo" << endl;
        -:  289:    }
       18:  290:    if (valor == 0) {  //  Problema que nao e solução
       14:  291:        return 0;
        -:  292:    }
        4:  293:    if (valor == 1) {  //  problema que satisfaz as 8 rainhas
        4:  294:        return 1;
        -:  295:    }
        -:  296:
    #####:  297:    return -1;
        -:  298:}
